#!/usr/bin/env python3
import argparse, sys, os, shutil, glob, contextlib, tempfile, socket, stat, secrets
from string import Template

import util
from deb import extract_files_from_deb_url
from initramfs import Initramfs
from layers import ContainerStream, dict_to_layer
from qemu import qemu_run

#XXX Cache these somewhere? ~/.cache/mkserver?
#XXX Check sha256sums of these.
pi_firmware_url='https://deb.debian.org/debian/pool/non-free/r/raspi-firmware/raspi-firmware_1.20210111+ds-2_arm64.deb'
busybox_url='https://deb.debian.org/debian/pool/main/b/busybox/busybox-static_1.30.1-6+b1_%s.deb'

mods = [
    'kernel/drivers/regulator/gpio-regulator.ko',
    'kernel/drivers/regulator/fixed.ko',
    'kernel/drivers/mmc/host/sdhci.ko',
    'kernel/drivers/mmc/host/sdhci-pltfm.ko',
    'kernel/drivers/mmc/host/sdhci-iproc.ko',
    'kernel/drivers/mmc/host/bcm2835.ko',
    'kernel/fs/nls/nls_ascii.ko',
    'kernel/fs/nls/nls_cp437.ko',
    'kernel/fs/fat/fat.ko',
    'kernel/fs/fat/vfat.ko',
    'kernel/drivers/block/loop.ko',
    'kernel/fs/squashfs/squashfs.ko',
    'kernel/fs/overlayfs/overlay.ko'
]

scriptroot = os.path.dirname(__file__)
datadir = os.path.join(scriptroot, 'data')

for i in ('xorriso', 'tar2sqfs'):
    if shutil.which(i) is None:
        print('%s is required, but not installed' % i)
        sys.exit(99)

parser = argparse.ArgumentParser(description='Build a server bootdir from a container image.')
parser.add_argument('--hostname', help='hostname of the server')
parser.add_argument('--domain', help='domain name of the server')
parser.add_argument('--no-sshkey', help='don\'t install an ssh auth key for the root user',
                    action='store_true')
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('--make-bootable', help='make a bootable starter image in the given directory',
                    type=str)
group.add_argument('--upgrade', help='install the image on an existing server', type=str)
group.add_argument('--run', help='run (in emulation) the bootable image in the given directory', type=str)

args = parser.parse_args()

if args.run:
    qemu_run(args.run)
    assert(False)
elif args.make_bootable:
    bootdir = args.make_bootable
    slotdir = os.path.join(bootdir, 'slota')
    with contextlib.suppress(FileNotFoundError):
        if len(os.listdir(bootdir)) != 0:
            print("make-bootable output directory isn't empty!")
            sys.exit(97)
        if not os.access(bootdir, os.W_OK | os.X_OK):
            print("make-bootable output directory isn't writable!")
            sys.exit(96)
elif args.upgrade:
    bootdir = None #XXX?
    slotdir = None #XXX mktempdir? make user specify dir?
else:
    assert(False)
layersdir = os.path.join(bootdir, 'layers')

#Extract container image info and layers
os.mkdir(layersdir)
os.mkdir(slotdir)
modtempdir = tempfile.TemporaryDirectory(prefix='mks_mods_')
putasides = [
    ('^boot/config-', (slotdir, True)), ('^boot/System.map-', (slotdir, True)),
    ('^boot/vmlinuz-', (slotdir, True)), ('^boot/initrd.img-', ('', True)),
    ('^usr/lib/linux-image-[^/]+/broadcom/.+', (slotdir, False)),
    ('^run/.+', ('', True)),
]
for mod in mods:
    putasides.append(('^lib/modules/[^/]+/%s' % mod, (modtempdir.name, False)))

#XXX Verify that there is a kernel, /boot exists, anything else?
cs = ContainerStream(sys.stdin.buffer, layersdir, putasides)

with open(os.path.join(slotdir, 'layers'), 'w') as layersfile:
    for layer in cs.get_layernames():
        os.makedirs(os.path.join(layersdir, layer), exist_ok=True)
        print(layer, file=layersfile)

arch = cs.get_architecture()

kernelver = glob.glob(os.path.join(slotdir, 'vmlinuz-*'))[0]
kernelver = os.path.split(kernelver)[-1][len('vmlinuz-'):]

#Get hostname/domainname
hostname = args.hostname
if not hostname:
    hostname = cs.get_tags()[0].split(':')[0]
    hostname = hostname.split('/')[1] if '/' in hostname else hostname

domain = args.domain
if not domain:
    domain = socket.getfqdn().split('.', 1)[1]

#Make initramfs
cmd = util.posix_list2cmdline(cs.get_cmdlist())
initramfs = Initramfs(busybox_url % arch,
                      os.path.join(datadir, 'init'), cmd)
initramfs.copyin(glob.glob(os.path.join(modtempdir.name, '*')), 'mods')
initramfs.write_cpiofile(os.path.join(slotdir, 'initrd.img-%s' % kernelver))

#Generate a finalize/keys/config layer
with open(os.path.join(datadir, 'hosts'), 'r') as f:
    hosts = Template(f.read()).substitute(hostname=hostname, domain=domain)
finalize = {
    'etc/hostname': (hostname + '\n', stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH),
    'etc/hosts': (hosts, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH),
    'etc/mtab': ('SYMLINK:/proc/mounts', 0),
    'etc/machine-id': (secrets.token_hex(16) + '\n', stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH),
}
#XXX Clobber ssh host keys, if present.

if not args.no_sshkey:
    keyfiles = ('id_ed25519.pub', 'id_rsa.pub')
    keyfiles = [ os.path.expanduser(os.path.join('~', '.ssh', x)) for x in keyfiles ]
    authkeys = []
    for key in keyfiles:
        if os.path.exists(key):
            with open(key, 'r') as kf:
                authkeys.append(kf.read().strip())
    finalize['root/.ssh/authorized_keys'] = ('\n'.join(authkeys) + '\n', stat.S_IRUSR | stat.S_IWUSR)

finalize_layer = os.path.join(slotdir, 'finalize')
dict_to_layer(finalize, finalize_layer)
os.makedirs(finalize_layer, exist_ok=True)

#Finish up. Write whole firmware, or do remote upgrade.
if args.make_bootable:
    if arch == 'arm64':
        extract_files_from_deb_url(pi_firmware_url, '^./usr/lib/raspi-firmware/', bootdir)
        #Copy bootslot .dtb files into outdir
        for dtb in glob.glob(os.path.join(slotdir, '*.dtb')):
            shutil.copy(dtb, bootdir)
        shutil.copy(os.path.join(datadir, 'cmdline.txt'), bootdir)
        with (open(os.path.join(datadir, 'config.txt'), 'r') as inf,
              open(os.path.join(bootdir, 'config.txt'), 'w') as outf):
             outf.write(Template(inf.read()).substitute(kernelver=kernelver))
    else:
        assert(False) #XXX xorriso for amd64.
elif args.upgrade:
    #XXX write me.
    #rsync or scp over new slot/layers
    #copy bootslot dtbs to /boot
    #adjust config.txt/cmdline.txt
    #GC layers dir
    assert(False)

print('\nBuilt %s.%s for arch %s' % (hostname, domain, arch))
